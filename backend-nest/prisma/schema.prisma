// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  done      Boolean  @default(false)
  createdAt DateTime @default(now())

  todoGroup   TodoGroup @relation(fields: [todoGroupId], references: [id])
  todoGroupId Int

  categories Category[]
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  terms      Boolean
  todoGroups TodoGroup[]
}

model TodoGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  todos     Todo[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  todos Todo[]
}

//*****************************************************************************************
//W schemacie realcji wiele do wielu w postaci explicite (jawnej), w tabeli pośredniczącej
//przechowujemy dodatkowe informacje oprócz id, oraz 2  id powiązanych elementów

//W schemacie relacji wiele do wielu w postaci implicit (niejawnej), nie musimy tworzyć
//tabeli pośredniczącej, zostanie ona utworzona za nas przez prisma, natomiast w takiej
//postaci nie możemy przechowywać żadnych dodatkowych elementów dla takiej relacji
//*****************************************************************************************

// model TodoGroupCategory {
//   id          Int       @id @default(autoincrement())
//   created     DateTime  @default(now())
//   todoGroup   TodoGroup @relation(fields: [todoGroupId], references: [id])
//   todoGroupId Int
//   category    Category  @relation(fields: [categoryId], references: [id])
//   categoryId  Int
// }

// Obsługa bazy danych:
//
// 1. Po naniesieniu dodatkowych zmian w bazie wykonaj:
//     prisma format
//    Dodane zostaną wszystkie potrzebne zależności
//
// 2. W celu utworzenia migracji napisz:
//     npm run db:migrate <nazwa_migracji>
//    Mogą pojawić się błędy związane z tym,  ze w bazie istnieją wpisy, które nie spełniają
//    warunków nowych zmian, w takim przypadku należy wyczyścić bazę ze starych rekordów
//
// 3. Czyszczenie starych rekordów i nanoszenie wszystkich migracji na bazę:
//     prisma migrate reset --force
//    Wyłącz aplikację przed wykonaniem polecenia
//
// 4. Zaktualizowanie wszystkich migracji (opcjonalne)
//     npm run db:update
